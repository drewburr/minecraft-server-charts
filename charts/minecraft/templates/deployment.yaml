{{- if ne (printf "%s" .Values.minecraftServer.eula) "FALSE" }}
apiVersion: apps/v1
kind: {{ ternary "StatefulSet" "Deployment" .Values.workloadAsStatefulSet }}
metadata:
  name: {{ template "minecraft.fullname" . }}
  {{- if .Values.deploymentAnnotations }}
  annotations:
    {{- range $key, $value := .Values.deploymentAnnotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  labels:
    app: {{ template "minecraft.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/name: "{{ .Chart.Name }}"
    app.kubernetes.io/instance: {{ template "minecraft.fullname" . }}
    app.kubernetes.io/version: "{{ .Chart.Version }}"
    {{- if .Values.deploymentLabels }}
    {{- range $key, $value := .Values.deploymentLabels}}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.workloadAsStatefulSet }}
  serviceName: {{ template "minecraft.fullname" . }}
  updateStrategy:
    type: {{ .Values.strategyType }}
  {{- else }}
  strategy:
    type: {{ .Values.strategyType }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "minecraft.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "minecraft.fullname" . }}
        app.kubernetes.io/name: "{{ .Chart.Name }}"
        app.kubernetes.io/instance: {{ template "minecraft.fullname" . }}
        app.kubernetes.io/version: "{{ .Chart.Version }}"
        {{- if .Values.podLabels }}
        {{- range $key, $value := .Values.podLabels}}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
        checksum/config-backup: {{ include (print $.Template.BasePath "/config-backup.yaml") . | sha256sum }}
        checksum/config-server: {{ include (print $.Template.BasePath "/config-server.yaml") . | sha256sum }}
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy}}
      {{- end }}
      {{- if .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml .Values.dnsConfig | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ template "minecraft.fullname" . }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        tty: true
        stdin: true
        {{- if or (.Values.lifecycle.postStart) (.Values.lifecycle.preStop)}}
        lifecycle:
          {{- if .Values.lifecycle.postStart }}
          postStart:
            exec:
              command:
              {{- range .Values.lifecycle.postStart }}
                - {{ . }}
              {{- end }}
          {{- end }}
          {{- if .Values.lifecycle.preStop }}
          preStop:
            exec:
              command:
              {{- range .Values.lifecycle.preStop }}
                - {{ . }}
              {{- end }}
          {{- end }}
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          exec:
            command:
            {{-  toYaml .Values.startupProbe.command | nindent 12 }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
        {{- end }}
        readinessProbe:
          exec:
            command:
            {{-  toYaml .Values.readinessProbe.command | nindent 12 }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        livenessProbe:
          exec:
            command:
            {{-  toYaml .Values.livenessProbe.command | nindent 12 }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        {{- with .Values.envFrom }}
        envFrom:
          - configMapRef:
              name: {{ template "minecraft.fullname" . }}-config
              optional: false
          {{- . | toYaml | nindent 10 }}
        {{- end }}
        {{- end }}
        env:
        {{- with .Values.minecraftServer.rcon }}
        {{- if and .enabled (not .withGeneratedPassword) }} # TODO: Validate functionality
        - name: RCON_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.minecraftServer.rcon.existingSecret | default (printf "%s-rcon" (include "minecraft.fullname" .)) }}
              key: {{ .Values.minecraftServer.rcon.secretKey | default "rcon-password" }}
        {{- end }}
        {{- end }}
        {{- with .Values.minecraftServer.autoCurseForge }}
        - name: CF_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .apiKey.existingSecret | default (printf "%s-curseforge" (include "minecraft.fullname" $)) }}
              key: {{ .apiKey.secretKey | default "cf-api-key" }}
        {{- end }}
        {{- template "minecraft.extraEnv" .Values.extraEnv }} # TODO: Testing and indentation checks
        ports:
        - name: minecraft
          containerPort: 25565
          protocol: TCP
        {{- if .Values.minecraftServer.rcon.enabled }}
        - name: rcon
          containerPort: {{ .Values.minecraftServer.rcon.port }}
          protocol: TCP
        {{- end }}
        {{- range .Values.minecraftServer.extraPorts }}
        {{- if .service.enabled }}
        - name: {{ .name }}
          containerPort: {{ .containerPort }}
          {{- if .protocol }}
          protocol: {{ .protocol }}
          {{- else }}
          protocol: TCP
          {{- end }}
        {{- end }}
        {{- end }}
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        {{- if .Values.persistence.altDataVolumeName }}
        - name: {{ .Values.persistence.altDataVolumeName }}
          mountPath: /data
        {{- else }}
        - name: datadir
          mountPath: /data
          {{- if (and .Values.persistence.dataDir.enabled .Values.persistence.dataDir.subPath) }}
          subPath: {{ .Values.persistence.dataDir.subPath }}
          {{- end }}
        {{- end }}
        - name: backupdir
          mountPath: {{ default "/backups" .Values.mcbackup.destDir }}
          readOnly: true
        {{- range .Values.extraVolumes }}
        {{-   if .volumeMounts }}
        {{-     toYaml .volumeMounts | nindent 8 }}
        {{-   end }}
        {{- end }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
      {{- if and .Values.mcbackup.enabled .Values.minecraftServer.rcon.enabled }}
      - name: {{ template "minecraft.fullname" . }}-mc-backup
        image: "{{ .Values.mcbackup.image.repository }}:{{ .Values.mcbackup.image.tag }}"
        imagePullPolicy: {{ .Values.mcbackup.image.pullPolicy }}
        resources:
          {{ toYaml .Values.mcbackup.resources | nindent 10 }}
      {{- with .Values.mcbackup.envFrom }}
        envFrom:
          - configMapRef:
              name: {{ template "minecraft.fullname" . }}-backup-config
              optional: false
          {{- . | toYaml | nindent 10 }}{{ end }}
        env:
        - name: RCON_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.minecraftServer.rcon.existingSecret | default (printf "%s-rcon" (include "minecraft.fullname" .)) }}
              key: {{ .Values.minecraftServer.rcon.secretKey | default "rcon-password" }}
        {{- if eq .Values.mcbackup.backupMethod "restic" }}
        {{- template "minecraft.extraEnv" .Values.mcbackup.extraEnv }} # TODO: Testing and indentation checks
        {{- end }}
        {{- template "minecraft.extraEnv" .Values.mcbackup.resticEnvs }} # TODO: Testing and indentation checks
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        {{- if .Values.persistence.altDataVolumeName }}
        - name: {{ .Values.persistence.altDataVolumeName }}
          mountPath: /data
        {{- else }}
        - name: datadir
          mountPath: /data
          readOnly: true
        {{- end }}
        - name: backupdir
          mountPath: {{ default "/backups" .Values.mcbackup.destDir }}
        {{- if or (eq .Values.mcbackup.backupMethod "rclone") (eq (include "isResticWithRclone" $) "true") }}
        - name: rclone-config
          mountPath: /config/rclone
        {{- end }}
        {{- range .Values.extraVolumes }}
        {{-   if .volumeMounts }}
        {{-     toYaml .volumeMounts | nindent 8 }}
        {{-   end }}
        {{- end }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
      {{- end }}
      {{- if .Values.sidecarContainers }}
      {{- toYaml .Values.sidecarContainers | nindent 6 }}
      {{- end }}
      {{- if or (eq .Values.mcbackup.backupMethod "rclone") (eq (include "isResticWithRclone" $) "true") }}
      initContainers:
        - name: init-container
          image: busybox
          command: ['sh', '-c', 'cp /secret/rclone.conf /config/rclone/']
          volumeMounts:
          - name: rclone-secret
            mountPath: /secret
          - name: rclone-config
            mountPath: /config/rclone
      {{- end }}
      volumes:
      - name: tmp
        emptyDir: {}
      {{- if .Values.persistence.dataDir.enabled }}
      {{-   if .Values.persistence.dataDir.existingClaim }}
      - name: datadir
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.dataDir.existingClaim }}
      {{-   else if (not .Values.workloadAsStatefulSet) }}
      - name: datadir
        persistentVolumeClaim:
          claimName: {{ template "minecraft.fullname" . }}-datadir
      {{-   end -}}
      {{/* if persistence enabled in stateful set without existing claim, a volume claim template will be defined */}}
      {{- else }}
      - name: datadir
        emptyDir: {}
      {{- end }}
      {{- if and .Values.mcbackup.persistence.backupDir.enabled .Values.mcbackup.enabled }}
      {{-   if .Values.mcbackup.persistence.backupDir.existingClaim }}
      - name: backupdir
        persistentVolumeClaim:
          claimName: {{ .Values.mcbackup.persistence.backupDir.existingClaim }}
      {{-   else if (not .Values.workloadAsStatefulSet) }}
      - name: backupdir
        persistentVolumeClaim:
          claimName: {{ template "minecraft.fullname" . }}-backupdir
      {{-   end -}}
      {{/* if persistence enabled in stateful set without existing claim, a volume claim template will be defined */}}
      {{- else }}
      - name: backupdir
        emptyDir: {}
      {{- end }}
      {{- if or (eq .Values.mcbackup.backupMethod "rclone") (eq (include "isResticWithRclone" $) "true") }}
      - name: rclone-secret
        secret:
          {{- if .Values.mcbackup.rcloneConfigExistingSecret }}
          secretName: {{ .Values.mcbackup.rcloneConfigExistingSecret }}
          {{- else }}
          secretName: {{ template "minecraft.fullname" . }}-rclone-config
          {{- end }}
          items:
          - key: rclone.conf
            path: rclone.conf
      - name: rclone-config
        emptyDir: {}
      {{- end }}
      {{- range .Values.extraVolumes }}
      {{-   if .volumes }}
      {{-     toYaml .volumes | nindent 6 }}
      {{-   end }}
      {{- end }}
      {{- range $key, $value := .Values.extraPodSpec }}
      {{ $key }}: {{ tpl $value $ }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.nodeSelector |n indent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{ toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{ toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
  {{- if .Values.workloadAsStatefulSet }}
  volumeClaimTemplates:
    {{- if and .Values.persistence.dataDir.enabled (not .Values.persistence.dataDir.existingClaim) }}
    - metadata:
        name: datadir
        labels:
          app: {{ template "minecraft.fullname" . }}
          chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
          release: "{{ .Release.Name }}"
          heritage: "{{ .Release.Service }}"
          app.kubernetes.io/name: "{{ .Chart.Name }}"
          app.kubernetes.io/instance: {{ template "minecraft.fullname" . }}
          app.kubernetes.io/version: "{{ .Chart.Version }}"
        annotations:
          {{- with .Values.persistence.annotations  }}
          {{ toYaml . | nindent 10 }}
          {{- end }}
          {{- if .Values.persistence.storageClass }}
          volume.beta.kubernetes.io/storage-class: {{ .Values.persistence.storageClass | quote }}
          {{- else }}
          volume.alpha.kubernetes.io/storage-class: default
          {{- end }}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.persistence.dataDir.Size | quote }}
        {{- if .Values.persistence.storageClass }}
        {{-   if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{-   else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{-   end }}
        {{- end }}
    {{- end }}
    {{- if and .Values.mcbackup.persistence.backupDir.enabled (not .Values.mcbackup.persistence.backupDir.existingClaim) }}
    - metadata:
        name: backupdir
        labels:
          app: {{ template "minecraft.fullname" . }}
          chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
          release: "{{ .Release.Name }}"
          heritage: "{{ .Release.Service }}"
          app.kubernetes.io/name: "{{ .Chart.Name }}"
          app.kubernetes.io/instance: {{ template "minecraft.fullname" . }}
          app.kubernetes.io/version: "{{ .Chart.Version }}"
        annotations:
          {{- with .Values.mcbackup.persistence.annotations  }}
          {{ toYaml . | nindent 10 }}
          {{- end }}
          {{- if .Values.mcbackup.persistence.storageClass }}
          volume.beta.kubernetes.io/storage-class: {{ .Values.mcbackup.persistence.storageClass | quote }}
          {{- else }}
          volume.alpha.kubernetes.io/storage-class: default
          {{- end }}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.mcbackup.persistence.backupDir.Size | quote }}
        {{- if .Values.mcbackup.persistence.storageClass }}
        {{-   if (eq "-" .Values.mcbackup.persistence.storageClass) }}
        storageClassName: ""
        {{-   else }}
        storageClassName: "{{ .Values.mcbackup.persistence.storageClass }}"
        {{-   end }}
        {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
